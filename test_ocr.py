#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö OCR –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from app.models.paddle_ocr import PaddleOCRProvider
from app.models.marker_ocr import TesseractOCRProvider
from app.models.mineru_ocr import EasyOCRProvider


async def test_provider(provider, test_file: str):
    """–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    print(f"\n{'='*60}")
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º: {provider.provider_name}")
    print(f"{'='*60}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("  [1/3] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...", end=" ", flush=True)
        await provider.initialize()
        print("‚úÖ")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        print("  [2/3] –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...", end=" ", flush=True)
        text = await provider.extract_text(test_file)
        print("‚úÖ")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("  [3/3] –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"    - –°–∏–º–≤–æ–ª–æ–≤: {len(text)}")
        print(f"    - –°—Ç—Ä–æ–∫: {len(text.splitlines())}")
        print(f"    - –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:")
        print(f"      {text[:200]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê")
        print(f"    {type(e).__name__}: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üß™ OCR Comparison Service - –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_files = list(Path("uploads").glob("*.pdf"))
    if not test_files:
        print("‚ùå –ù–µ—Ç PDF —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ uploads/")
        print("   –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        return
    
    test_file = str(test_files[0])
    print(f"üìÑ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    providers = [
        PaddleOCRProvider(),
        TesseractOCRProvider(),
        EasyOCRProvider()
    ]
    
    results = {}
    for provider in providers:
        success = await test_provider(provider, test_file)
        results[provider.provider_name] = success
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"{'='*60}")
    
    success_count = sum(results.values())
    total_count = len(results)
    
    for name, success in results.items():
        status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if success else "‚ùå –û—à–∏–±–∫–∞"
        print(f"  {name:15} {status}")
    
    print(f"\n  –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
    
    if success_count == total_count:
        print("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return 0
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
