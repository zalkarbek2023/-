#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö OCR –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
"""
import asyncio
import sys
from pathlib import Path
import re

try:
    import pandas as pd  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML-—Ç–∞–±–ª–∏—Ü
except Exception:  # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π
    pd = None

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from app.models.paddle_ocr import PaddleOCRProvider
from app.models.marker_ocr import TesseractOCRProvider
from app.models.mineru_ocr import EasyOCRProvider


def _df_to_markdown(df) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è pandas.DataFrame –≤ Markdown-—Ç–∞–±–ª–∏—Ü—É –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç tabulate.

    –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –∏–º–µ–Ω –∫–æ–ª–æ–Ω–æ–∫, –∑–∞—Ç–µ–º —Å—Ç—Ä–æ–∫–∏.
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Å—Ç—Ä–æ–∫–∞–º –∏ –∑–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –ø—Ä–æ–±–µ–ª–∞–º–∏
    cols = [str(c).strip() for c in df.columns]
    rows = [[str(x).replace('\n', ' ').strip() for x in row] for row in df.astype(str).values.tolist()]

    # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ = max(–¥–ª–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –¥–ª–∏–Ω–∞ –ª—é–±–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)
    widths = [len(col) for col in cols]
    for r in rows:
        for i, cell in enumerate(r):
            if i < len(widths):
                widths[i] = max(widths[i], len(cell))

    def fmt_row(values):
        return "| " + " | ".join(v.ljust(widths[i]) for i, v in enumerate(values)) + " |"

    header = fmt_row(cols)
    separator = "| " + " | ".join("-" * w for w in widths) + " |"
    body = "\n".join(fmt_row(r) for r in rows)
    return "\n".join([header, separator, body])


def _html_table_to_markdown(html: str) -> str:
    """–ü–∞—Ä—Å–∏—Ç HTML —Å –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Markdown-—Ç–∞–±–ª–∏—Ü—É.

    –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pandas.read_html (—Ç—Ä–µ–±—É–µ—Ç lxml). –ï—Å–ª–∏ pandas –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π HTML –∫–∞–∫ fallback.
    """
    if pd is None:
        return html
    try:
        # read_html –≤–µ—Ä–Ω–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü; –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é
        dfs = pd.read_html(html, header=0)
        if not dfs:
            return html
        df = dfs[0]
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ—Ç (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π), –ø—Ä–æ–±—É–µ–º –±–µ–∑ header
        if df.columns.tolist() == [0]:
            dfs2 = pd.read_html(html, header=None)
            if dfs2:
                df = dfs2[0]
                # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                if len(df) > 0:
                    df.columns = [str(x) for x in df.iloc[0].tolist()]
                    df = df.iloc[1:].reset_index(drop=True)
        return _df_to_markdown(df)
    except Exception:
        return html


def convert_tables_to_markdown(text: str) -> str:
    """–ù–∞—Ö–æ–¥–∏—Ç HTML-—Ç–∞–±–ª–∏—Ü—ã –≤ —Ç–µ–∫—Å—Ç–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –≤ Markdown-—Ç–∞–±–ª–∏—Ü—ã.

    –ò—â–µ–º —Ç–µ–≥–∏ <table ...>...</table> –∏ —Ç–æ—á–µ—á–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä [–¢–∞–±–ª–∏—Ü–∞] –ø–µ—Ä–µ–¥ –±–ª–æ–∫–æ–º, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ.
    """
    # –ü–æ–∏—Å–∫ –±–ª–æ–∫–æ–≤ <table>...</table> (–≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫)
    pattern = re.compile(r"<table[\s\S]*?</table>", re.IGNORECASE)

    def repl(match):
        html_table = match.group(0)
        md = _html_table_to_markdown(html_table)
        return "\n" + md + "\n"

    # –ò–Ω–æ–≥–¥–∞ —Ç–∞–±–ª–∏—Ü–∞ –æ–±–µ—Ä–Ω—É—Ç–∞ –≤ <html><body>... ‚Äî –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, pattern –ø–æ–π–º–∞–µ—Ç <table>...
    return pattern.sub(repl, text)


async def test_provider(provider, test_file: str):
    """–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    print(f"\n{'='*60}")
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º: {provider.provider_name}")
    print(f"{'='*60}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("  [1/3] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...", end=" ", flush=True)
        await provider.initialize()
        print("‚úÖ")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        print("  [2/3] –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...", end=" ", flush=True)
        text = await provider.extract_text(test_file)
        # –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HTML-—Ç–∞–±–ª–∏—Ü—ã –≤ Markdown –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        text = convert_tables_to_markdown(text)
        print("‚úÖ")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("  [3/3] –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"    - –°–∏–º–≤–æ–ª–æ–≤: {len(text)}")
        print(f"    - –°—Ç—Ä–æ–∫: {len(text.splitlines())}")
        print(f"    - –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:")
        print(f"      {text[:200]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê")
        print(f"    {type(e).__name__}: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üß™ OCR Comparison Service - –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_files = list(Path("uploads").glob("*.pdf"))
    if not test_files:
        print("‚ùå –ù–µ—Ç PDF —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ uploads/")
        print("   –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        return
    
    test_file = str(test_files[0])
    print(f"üìÑ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    providers = [
        PaddleOCRProvider(),
        TesseractOCRProvider(),
        EasyOCRProvider()
    ]
    
    results = {}
    for provider in providers:
        success = await test_provider(provider, test_file)
        results[provider.provider_name] = success
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"{'='*60}")
    
    success_count = sum(results.values())
    total_count = len(results)
    
    for name, success in results.items():
        status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if success else "‚ùå –û—à–∏–±–∫–∞"
        print(f"  {name:15} {status}")
    
    print(f"\n  –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
    
    if success_count == total_count:
        print("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return 0
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
