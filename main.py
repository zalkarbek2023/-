"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è OCR –º–æ–¥–µ–ª–µ–π
"""
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from contextlib import asynccontextmanager
import logging
import os
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app.api.routes import router as api_router, set_ocr_service
from app.services.comparison import OCRComparisonService
from app.models.paddle_ocr import PaddleOCRProvider
from app.models.marker_ocr import TesseractOCRProvider  # –ò–∑–º–µ–Ω–µ–Ω–æ: Tesseract –≤–º–µ—Å—Ç–æ Marker
from app.models.mineru_ocr import EasyOCRProvider  # –ò–∑–º–µ–Ω–µ–Ω–æ: EasyOCR –≤–º–µ—Å—Ç–æ MinerU


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
ocr_service = None


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ.
    """
    global ocr_service
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ OCR Comparison Service...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    upload_dir = Path(os.getenv("UPLOAD_DIR", "./uploads"))
    upload_dir.mkdir(exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    providers = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã
    if os.getenv("ENABLE_PADDLE", "true").lower() == "true":
        try:
            providers.append(PaddleOCRProvider())
            logger.info("‚úì PaddleOCR –≤–∫–ª—é—á–µ–Ω")
        except Exception as e:
            logger.warning(f"‚úó PaddleOCR –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    if os.getenv("ENABLE_TESSERACT", "true").lower() == "true":
        try:
            providers.append(TesseractOCRProvider())
            logger.info("‚úì Tesseract OCR –≤–∫–ª—é—á–µ–Ω")
        except Exception as e:
            logger.warning(f"‚úó Tesseract OCR –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    if os.getenv("ENABLE_EASYOCR", "true").lower() == "true":
        try:
            providers.append(EasyOCRProvider())
            logger.info("‚úì EasyOCR –≤–∫–ª—é—á–µ–Ω")
        except Exception as e:
            logger.warning(f"‚úó EasyOCR –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    if not providers:
        logger.error("‚ùå –ù–∏ –æ–¥–∏–Ω OCR –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
        raise RuntimeError("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω OCR –ø—Ä–æ–≤–∞–π–¥–µ—Ä")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    ocr_service = OCRComparisonService(providers)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    try:
        await ocr_service.initialize_providers()
        logger.info(f"‚úì –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(providers)} OCR –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–æ—É—Ç–æ–≤
    set_ocr_service(ocr_service)
    
    logger.info("‚úì –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    yield  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...")
    
    for provider in providers:
        try:
            provider.cleanup()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {provider.provider_name}: {e}")
    
    logger.info("üëã –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="OCR Comparison Service",
    description="""
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ 
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º 3 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö OCR-–º–æ–¥–µ–ª–µ–π.
    
    ## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ 3 OCR –º–æ–¥–µ–ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    - –ü–æ—Å–∏–º–≤–æ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    - HTML –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
    - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    
    ## OCR –ú–æ–¥–µ–ª–∏:
    1. **PaddleOCR** - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç PaddlePaddle
    2. **Tesseract** - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ (100+ —è–∑—ã–∫–æ–≤)
    3. **EasyOCR** - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–∞ PyTorch (80+ —è–∑—ã–∫–æ–≤)
    """,
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤
app.include_router(api_router)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
static_dir = Path("./static")
if static_dir.exists():
    app.mount("/static", StaticFiles(directory=str(static_dir)), name="static")


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "service": "OCR Comparison API",
        "version": "1.0.0",
        "status": "running",
        "docs": "/docs",
        "endpoints": {
            "upload": "POST /api/upload",
            "process": "POST /api/process/{task_id}",
            "status": "GET /api/status/{task_id}",
            "results": "GET /api/results/{task_id}",
            "html": "GET /api/compare/{task_id}/html",
            "health": "GET /api/health"
        }
    }


@app.get("/info")
async def info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö"""
    global ocr_service
    
    if not ocr_service:
        return {"error": "–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
    
    providers_info = []
    for provider in ocr_service.providers:
        providers_info.append({
            "name": provider.provider_name,
            "initialized": provider.is_initialized,
            "supported_formats": provider.get_supported_formats()
        })
    
    return {
        "service": "OCR Comparison Service",
        "version": "1.0.0",
        "providers": providers_info,
        "total_providers": len(ocr_service.providers),
        "upload_dir": os.getenv("UPLOAD_DIR", "./uploads"),
        "max_file_size": os.getenv("MAX_FILE_SIZE", "10MB"),
        "supported_formats": os.getenv("SUPPORTED_FORMATS", "pdf,png,jpg,jpeg,tiff")
    }


if __name__ == "__main__":
    import uvicorn
    
    host = os.getenv("APP_HOST", "0.0.0.0")
    port = int(os.getenv("APP_PORT", "8000"))
    
    uvicorn.run(
        "main:app",
        host=host,
        port=port,
        reload=True,
        log_level=os.getenv("LOG_LEVEL", "info").lower()
    )
